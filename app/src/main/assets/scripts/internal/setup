#!/bin/sh
set -e

PORT=2222
MODE=background
DO_USERS=1
DO_SSH=1
DO_START=1
DO_TTY=1

validate_port() {
  case "$1" in
    ''|*[!0-9]*) return 1;;
    *) [ "$1" -ge 1 ] && [ "$1" -le 65535 ];;
  esac
}

validate_settings() {
  validate_port "$PORT" || {
    printf "Error: Invalid port number '%s'. Must be between 1-65535.\n" "$PORT" >&2
    exit 1
  }
  [ "$PORT" -lt 1024 ] && {
    printf "Warning: Port %s requires root privileges\n" "$PORT" >&2
  }
  case "$MODE" in
    foreground|background) ;;
    *) printf "Error: Invalid mode '%s'. Must be 'foreground' or 'background'.\n" "$MODE" >&2; exit 1;;
  esac
  case "$DO_USERS" in
    0|1) ;;
    *) printf "Error: Invalid DO_USERS value '%s'. Must be 0 or 1.\n" "$DO_USERS" >&2; exit 1;;
  esac
  case "$DO_SSH" in
    0|1) ;;
    *) printf "Error: Invalid DO_SSH value '%s'. Must be 0 or 1.\n" "$DO_SSH" >&2; exit 1;;
  esac
  case "$DO_START" in
    0|1) ;;
    *) printf "Error: Invalid DO_START value '%s'. Must be 0 or 1.\n" "$DO_START" >&2; exit 1;;
  esac
  case "$DO_TTY" in
    0|1) ;;
    *) printf "Error: Invalid DO_TTY value '%s'. Must be 0 or 1.\n" "$DO_TTY" >&2; exit 1;;
  esac
}

while [ $# -gt 0 ]; do
  case "$1" in
    --port) 
      [ -z "$2" ] && { printf "Error: --port requires a value\n" >&2; exit 1; }
      PORT="$2"; shift;;
    --foreground) MODE=foreground;;
    --background) MODE=background;;
    --no-users) DO_USERS=0;;
    --no-ssh-config) DO_SSH=0;;
    --no-start) DO_START=0;;
    --no-tty) DO_TTY=0;;
    -h|--help) printf "Usage: setup [--port N] [--foreground] [--background] [--no-users] [--no-ssh-config] [--no-start] [--no-tty]\n"; exit 0;;
    *) printf "Unknown option: %s\n" "$1" >&2; exit 1;;
  esac
  shift
done

validate_settings

ensure_openssh() {
  if ! command -v sshd >/dev/null 2>&1; then
    apk update >/dev/null 2>&1 || true
    apk add --no-progress openssh openssh-server >/dev/null 2>&1 || apk add openssh openssh-server >/dev/null 2>&1
  fi
}

ensure_shadow() {
  if ! command -v chpasswd >/dev/null 2>&1; then
    apk add --no-progress shadow >/dev/null 2>&1 || apk add shadow >/dev/null 2>&1
  fi
}

ensure_shells() {
  # Make sure allowed shells list contains /bin/sh and /bin/bash (if installed)
  for s in /bin/sh /bin/bash; do
    [ -x "$s" ] || [ "$s" = "/bin/bash" ] && {
      grep -qxF "$s" /etc/shells 2>/dev/null || echo "$s" >> /etc/shells
    }
  done
}

safe_set_shell() {
  # safe_set_shell <user> <shell>
  u="$1"; shpath="$2"
  ensure_shells
  if command -v chsh >/dev/null 2>&1; then
    chsh -s "$shpath" "$u" >/dev/null 2>&1 || true
  fi
  # Fallback edit /etc/passwd
  sed -i "s#^\($u:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\).*#\\1$shpath#" /etc/passwd || true
}

set_password() {
  # set_password <user> <pass>
  u="$1"; p="$2"
  # Force unlock first in case account is locked
  passwd -u "$u" >/dev/null 2>&1 || true
  if command -v chpasswd >/dev/null 2>&1; then
    echo "$u:$p" | chpasswd 2>/dev/null || {
      # Fallback to passwd via stdin if chpasswd fails
      printf "%s\n%s\n" "$p" "$p" | passwd "$u" 2>/dev/null || true
    }
  else
    # Fallback to passwd via stdin
    printf "%s\n%s\n" "$p" "$p" | passwd "$u" 2>/dev/null || true
  fi
}

setup_users() {
  ensure_shadow
  set_password root server
  [ -x /bin/sh ] && safe_set_shell root "/bin/sh"
  [ -f /etc/nologin ] && rm -f /etc/nologin || true
}

backup_sshd_config() {
  CFG="$1"
  BACKUP_DIR="/etc/ssh/backups"
  TIMESTAMP=$(date +%Y%m%d_%H%M%S 2>/dev/null || printf "backup")
  
  mkdir -p "$BACKUP_DIR" || return 1
  
  if [ -f "$CFG" ]; then
    cp "$CFG" "$BACKUP_DIR/sshd_config.$TIMESTAMP" || {
      printf "Warning: Failed to backup sshd_config\n" >&2
      return 1
    }
  fi
  return 0
}

verify_sshd_config() {
  CFG="$1"
  [ -f "$CFG" ] || {
    printf "Error: sshd_config file does not exist: %s\n" "$CFG" >&2
    return 1
  }
  [ -r "$CFG" ] || {
    printf "Error: Cannot read sshd_config file: %s\n" "$CFG" >&2
    return 1
  }
  [ -w "$CFG" ] || {
    printf "Error: Cannot write to sshd_config file: %s\n" "$CFG" >&2
    return 1
  }
  return 0
}

setup_ssh() {
  CFG=/etc/ssh/sshd_config
  verify_sshd_config "$CFG" || return 1
  backup_sshd_config "$CFG" || {
    printf "Warning: Could not backup sshd_config, proceeding anyway\n" >&2
  }
  if [ -f "$CFG.pkg-default" ]; then cp -f "$CFG.pkg-default" "$CFG"; fi
  ensure_shadow
  sed -i 's/^Include\b/# &/' "$CFG" || true
  if [ -d /etc/ssh/sshd_config.d ]; then
    for f in /etc/ssh/sshd_config.d/*.conf; do [ -f "$f" ] && sed -i 's/^Port\b/# &/' "$f"; done
  fi
  
  
  sed -i '/^Port\b/d' "$CFG" || true
  sed -i '/^ListenAddress\b/d' "$CFG" || true
  printf '\nPort %s\nListenAddress 0.0.0.0\n' "$PORT" >> "$CFG"
  sed -i '/^UsePAM\b/d' "$CFG" || true
  sed -i '/^PasswordAuthentication\b/d' "$CFG" || true
  printf 'PasswordAuthentication yes\n' >> "$CFG"
  sed -i '/^PermitRootLogin\b/d' "$CFG" || true
  printf 'PermitRootLogin yes\n' >> "$CFG"
  sed -i '/^UseLogin\b/d;/^PrintLastLog\b/d;/^PrintMotd\b/d;/^PermitEmptyPasswords\b/d' "$CFG" || true
  printf 'PermitEmptyPasswords no\nUseDNS no\nAuthorizedKeysFile .ssh/authorized_keys\n' >> "$CFG"
  sed -i '/^PermitTTY\b/d' "$CFG" || true
  if [ "$DO_TTY" = 1 ]; then
    printf 'PermitTTY yes\n' >> "$CFG"
  else
    printf 'PermitTTY no\n' >> "$CFG"
  fi
  if grep -q '^Subsystem[[:space:]]\+sftp' "$CFG"; then
    sed -i 's#^Subsystem[[:space:]]\+sftp\b.*#Subsystem sftp /usr/lib/ssh/sftp-server#' "$CFG" || true
  else
    printf 'Subsystem sftp /usr/lib/ssh/sftp-server\n' >> "$CFG"
  fi
  ssh-keygen -A >/dev/null 2>&1 || true
  mkdir -p /var/run/sshd /var/empty /run/sshd
  chmod 755 /var/run/sshd /var/empty /run/sshd
  touch /var/run/utmp /var/log/wtmp 2>/dev/null || true
  chmod 664 /var/run/utmp /var/log/wtmp 2>/dev/null || true
  sed -i '/^UsePrivilegeSeparation\b/d' "$CFG" || true
  /usr/sbin/sshd -t >/dev/null 2>&1
}

start_sshd() {
  if [ "$MODE" = background ]; then
    PROOT_NO_SECCOMP=1 /usr/sbin/sshd -e -p "$PORT" -o StrictModes=no -o PasswordAuthentication=yes >/dev/null 2>&1 || true
  else
    export PROOT_NO_SECCOMP=1
    exec /usr/sbin/sshd -D -e -p "$PORT" -o StrictModes=no -o PasswordAuthentication=yes 2>/dev/null
  fi
}

print_summary() {
  IP=""
  if command -v ip >/dev/null 2>&1; then
    IP=$(ip route get 1.1.1.1 2>/dev/null | sed -n 's/.*src \([0-9.]*\).*/\1/p')
  fi
  [ -z "$IP" ] && IP=$(hostname -i 2>/dev/null | awk '{print $1}')
  case "$IP" in 127.*|0.0.0.0|"") IP="<phone-ip>";; esac
  printf "SSH ready on port %s\nConnect: ssh root@%s -p %s (password: server)\n" "$PORT" "$IP" "$PORT"
}

check_step_status() {
  STEP_NAME="$1"
  STATUS="$2"
  if [ "$STATUS" -ne 0 ]; then
    printf "Error: %s step failed with status %d\n" "$STEP_NAME" "$STATUS" >&2
    return 1
  fi
  return 0
}

ensure_openssh
STATUS=$?
check_step_status "OpenSSH installation" "$STATUS" || exit 1

if [ "$DO_USERS" = 1 ]; then
  setup_users
  STATUS=$?
  check_step_status "User setup" "$STATUS" || exit 1
fi

if [ "$DO_SSH" = 1 ]; then
  setup_ssh
  STATUS=$?
  check_step_status "SSH configuration" "$STATUS" || exit 1
fi

if [ "$DO_START" = 1 ]; then
  start_sshd
  STATUS=$?
  check_step_status "SSH daemon start" "$STATUS" || exit 1
fi

print_summary

exit 0
