#!/bin/sh
set -e

PORT=2222
MODE=background
DO_USERS=1
DO_SSH=1
DO_START=1
DO_TTY=1
DO_CODE_SERVER=0

ERR_INVALID_PORT=1
ERR_PKG_INSTALL=2
ERR_USER_SETUP=3
ERR_SSH_CONFIG=4
ERR_SSH_START=5

SPIN_CHARS='-\\|/'
spinner_pid=0

start_spinner() {
	printf "\r[*] %s " "$1"
	(
		i=0
		while true; do
			i=$(( (i + 1) % 4 ))
			c=$(printf %s "$SPIN_CHARS" | cut -c $((i+1)))
			printf "\r[*] %s %s" "$1" "$c"
			sleep 0.1
		done
	) &
	spinner_pid=$!
}

stop_spinner() {
	if [ "$spinner_pid" -ne 0 ]; then
		kill "$spinner_pid" 2>/dev/null || true
		wait "$spinner_pid" 2>/dev/null || true
		spinner_pid=0
	fi
}

task_success() {
	stop_spinner
	printf "\r[âœ“] %s\n" "$1"
}

task_fail() {
	stop_spinner
	printf "\r[!] %s\n" "$1"
}

validate_port() {
	case "$1" in
		''|*[!0-9]*) return 1;;
		*) [ "$1" -ge 1 ] && [ "$1" -le 65535 ];;
	esac
}

validate_settings() {
	validate_port "$PORT" || {
		printf "Error: Invalid port number '%s'. Must be between 1-65535.\n" "$PORT" >&2
		exit $ERR_INVALID_PORT
	}
	[ "$PORT" -lt 1024 ] && {
		printf "Warning: Port %s requires root privileges\n" "$PORT" >&2
	}
	case "$MODE" in
		foreground|background) ;;
		*) printf "Error: Invalid mode '%s'. Must be 'foreground' or 'background'.\n" "$MODE" >&2; exit $ERR_INVALID_PORT;;
	esac
	case "$DO_USERS" in
		0|1) ;;
		*) printf "Error: Invalid DO_USERS value '%s'. Must be 0 or 1.\n" "$DO_USERS" >&2; exit $ERR_INVALID_PORT;;
	esac
	case "$DO_SSH" in
		0|1) ;;
		*) printf "Error: Invalid DO_SSH value '%s'. Must be 0 or 1.\n" "$DO_SSH" >&2; exit $ERR_INVALID_PORT;;
	esac
	case "$DO_START" in
		0|1) ;;
		*) printf "Error: Invalid DO_START value '%s'. Must be 0 or 1.\n" "$DO_START" >&2; exit $ERR_INVALID_PORT;;
	esac
	case "$DO_TTY" in
		0|1) ;;
		*) printf "Error: Invalid DO_TTY value '%s'. Must be 0 or 1.\n" "$DO_TTY" >&2; exit $ERR_INVALID_PORT;;
	esac
}

while [ $# -gt 0 ]; do
	case "$1" in
		--port) 
			if [ -z "$2" ]; then
				printf "Error: --port requires a value\n" >&2
				exit $ERR_INVALID_PORT
			fi
			PORT="$2"; shift;;
		--foreground) MODE=foreground;;
		--background) MODE=background;;
		--no-users) DO_USERS=0;;
		--no-ssh-config) DO_SSH=0;;
		--no-start) DO_START=0;;
		--no-tty) DO_TTY=0;;
		-h|--help) printf "Usage: setup [--port N] [--foreground] [--background] [--no-users] [--no-ssh-config] [--no-start] [--no-tty]\n"; exit 0;;
		*) printf "Unknown option: %s\n" "$1" >&2; exit $ERR_INVALID_PORT;;
	esac
	shift
done

validate_settings

setup_repositories() {
	REPOS_FILE="/etc/apk/repositories"
	if [ -f "$REPOS_FILE" ]; then
		ALPINE_VERSION=$(cat /etc/alpine-release | cut -d. -f1-2)
		# #COMPLETION_DRIVE: Assuming Alpine version detection works and repositories are accessible
		# #SUGGEST_VERIFY: Add fallback repository URLs and version validation
		if ! grep -q "community" "$REPOS_FILE"; then
			echo "https://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/community" >> "$REPOS_FILE"
		fi
		if ! grep -q "testing" "$REPOS_FILE"; then
			echo "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> "$REPOS_FILE"
		fi
		apk update >/dev/null 2>&1 || true
	fi
}


ensure_openssh() {
	start_spinner "Installing OpenSSH server"
	setup_repositories
	if ! command -v sshd >/dev/null 2>&1; then
		if apk add --no-progress openssh openssh-server >/dev/null 2>&1; then
			task_success "OpenSSH server installed"
		else
			task_fail "OpenSSH installation failed"
			exit $ERR_PKG_INSTALL
		fi
	else
		task_success "OpenSSH server already available"
	fi
}

ensure_shadow() {
	if ! command -v chpasswd >/dev/null 2>&1; then
		if ! apk add --no-progress shadow >/dev/null 2>&1; then
			return 1
		fi
	fi
	return 0
}

ensure_shells() {
	for s in /bin/sh /bin/bash; do
		[ -x "$s" ] || [ "$s" = "/bin/bash" ] && {
			grep -qxF "$s" /etc/shells 2>/dev/null || echo "$s" >> /etc/shells
		}
	done
}

safe_set_shell() {
	u="$1"; shpath="$2"
	ensure_shells
	if command -v chsh >/dev/null 2>&1; then
		chsh -s "$shpath" "$u" >/dev/null 2>&1 || true
	fi
	sed -i "s#^\($u:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\).*#\\1$shpath#" /etc/passwd || true
}

set_password() {
	u="$1"; p="$2"
	passwd -u "$u" >/dev/null 2>&1 || true
	if command -v chpasswd >/dev/null 2>&1; then
		echo "$u:$p" | chpasswd 2>/dev/null || {
			printf "%s\n%s\n" "$p" "$p" | passwd "$u" 2>/dev/null || true
		}
	else
		printf "%s\n%s\n" "$p" "$p" | passwd "$u" 2>/dev/null || true
	fi
}

setup_users() {
	start_spinner "Configuring root user"
	if ! ensure_shadow; then
		task_fail "Shadow utilities installation failed"
		exit $ERR_PKG_INSTALL
	fi
	if set_password root server && [ -x /bin/sh ] && safe_set_shell root "/bin/sh"; then
		[ -f /etc/nologin ] && rm -f /etc/nologin || true
		task_success "Root user configured"
	else
		task_fail "Root user configuration failed"
		exit $ERR_USER_SETUP
	fi
}

backup_sshd_config() {
	CFG="$1"
	[ -f "$CFG" ] || return 1
	[ -r "$CFG" ] || return 1
	BACKUP_FILE="${CFG}.backup.$(date +%Y%m%d_%H%M%S)"
	if cp "$CFG" "$BACKUP_FILE" 2>/dev/null && [ -f "$BACKUP_FILE" ]; then
		chmod 600 "$BACKUP_FILE" 2>/dev/null || true
		printf "Config backed up to: %s\n" "$BACKUP_FILE" >&2
		return 0
	else
		printf "Warning: Could not create backup of %s\n" "$CFG" >&2
		return 1
	fi
}

verify_sshd_config() {
	CFG="$1"
	[ -f "$CFG" ] || {
		printf "Error: sshd_config file does not exist: %s\n" "$CFG" >&2
		return 1
	}
	[ -r "$CFG" ] || {
		printf "Error: Cannot read sshd_config file: %s\n" "$CFG" >&2
		return 1
	}
	[ -w "$CFG" ] || {
		printf "Error: Cannot write to sshd_config file: %s\n" "$CFG" >&2
		return 1
	}
	return 0
}

setup_ssh() {
	start_spinner "Configuring SSH server"
	CFG=/etc/ssh/sshd_config
	verify_sshd_config "$CFG" || {
		task_fail "SSH configuration file validation failed"
		exit $ERR_SSH_CONFIG
	}
	if ! backup_sshd_config "$CFG"; then
		printf "Warning: Could not backup SSH config - continuing with caution\n" >&2
		sleep 1
	fi
	if [ -f "$CFG.pkg-default" ]; then cp -f "$CFG.pkg-default" "$CFG"; fi
	if ! ensure_shadow; then
		task_fail "Shadow utilities required for SSH authentication"
		exit $ERR_PKG_INSTALL
	fi
	sed -i 's/^Include\b/# &/' "$CFG" || true
	if [ -d /etc/ssh/sshd_config.d ]; then
		for f in /etc/ssh/sshd_config.d/*.conf; do [ -f "$f" ] && sed -i 's/^Port\b/# &/' "$f"; done
	fi
	
	if ! /usr/sbin/sshd -t -f "$CFG" >/dev/null 2>&1; then
		task_fail "Original SSH configuration is invalid"
		exit $ERR_SSH_CONFIG
	fi
	
	sed -i '/^Port\b/d' "$CFG" || true
	sed -i '/^ListenAddress\b/d' "$CFG" || true
	printf '\nPort %s\nListenAddress 0.0.0.0\n' "$PORT" >> "$CFG"
	sed -i '/^UsePAM\b/d' "$CFG" || true
	sed -i '/^PasswordAuthentication\b/d' "$CFG" || true
	printf 'PasswordAuthentication yes\n' >> "$CFG"
	sed -i '/^PermitRootLogin\b/d' "$CFG" || true
	printf 'PermitRootLogin yes\n' >> "$CFG"
	sed -i '/^UseLogin\b/d;/^PrintLastLog\b/d;/^PrintMotd\b/d;/^PermitEmptyPasswords\b/d' "$CFG" || true
	printf 'PermitEmptyPasswords no\nUseDNS no\nAuthorizedKeysFile .ssh/authorized_keys\n' >> "$CFG"
	sed -i '/^AllowTcpForwarding\b/d' "$CFG" || true
	printf 'AllowTcpForwarding yes\n' >> "$CFG"
	sed -i '/^PermitTTY\b/d' "$CFG" || true
	if [ "$DO_TTY" = 1 ]; then
		printf 'PermitTTY yes\n' >> "$CFG"
	else
		printf 'PermitTTY no\n' >> "$CFG"
	fi
	if grep -q '^Subsystem[[:space:]]\+sftp' "$CFG"; then
		sed -i 's#^Subsystem[[:space:]]\+sftp\b.*#Subsystem sftp /usr/lib/ssh/sftp-server#' "$CFG" || true
	else
		printf 'Subsystem sftp /usr/lib/ssh/sftp-server\n' >> "$CFG"
	fi
	ssh-keygen -A >/dev/null 2>&1 || true
	mkdir -p /var/run/sshd /var/empty /run/sshd
	chmod 755 /var/run/sshd /var/empty /run/sshd
	touch /var/run/utmp /var/log/wtmp 2>/dev/null || true
	chmod 664 /var/run/utmp /var/log/wtmp 2>/dev/null || true
	sed -i '/^UsePrivilegeSeparation\b/d' "$CFG" || true
	if /usr/sbin/sshd -t >/dev/null 2>&1; then
		task_success "SSH server configured"
	else
		task_fail "SSH configuration validation failed"
		exit $ERR_SSH_CONFIG
	fi
}

start_sshd() {
	start_spinner "Starting SSH server"
	if [ "$MODE" = background ]; then
		if PROOT_NO_SECCOMP=1 /usr/sbin/sshd -e -p "$PORT" -o StrictModes=no -o PasswordAuthentication=yes >/dev/null 2>&1; then
			task_success "SSH server started in background"
		else
			task_fail "SSH server start failed"
			exit $ERR_SSH_START
		fi
	else
		task_success "SSH server ready for foreground mode"
		export PROOT_NO_SECCOMP=1
		exec /usr/sbin/sshd -D -e -p "$PORT" -o StrictModes=no -o PasswordAuthentication=yes 2>/dev/null
	fi
}

print_summary() {
	IP=""
	if command -v ip >/dev/null 2>&1; then
		IP=$(ip route get 1.1.1.1 2>/dev/null | sed -n 's/.*src \([0-9.]*\).*/\1/p')
	fi
	[ -z "$IP" ] && IP=$(hostname -i 2>/dev/null | awk '{print $1}')
	case "$IP" in 127.*|0.0.0.0|"") IP="<phone-ip>";; esac
	
	printf "\n"
	printf "Services Information:\n"
	printf "=====================\n"
	printf "SSH Server: port %s\n" "$PORT"
	printf "\n"
	printf "Connection Details:\n"
	printf "==================\n"
	printf "SSH: ssh root@%s -p %s (password: server)\n" "$IP" "$PORT"
	printf "\n"
	sleep 3
	clear
	printf "Welcome to SamsaraServer\n"
	printf "========================\n"
	printf "Your Alpine Linux development environment is ready!\n"
	printf "\n"
	printf "Active Services:\n"
	printf "  SSH Server (port %s)\n" "$PORT"
	printf "\n"
	printf "Connect from another device:\n"
	printf "  SSH: ssh root@%s -p %s\n" "$IP" "$PORT"
	printf "\n"
}

check_step_status() {
	STEP="$1"
	STATUS="$2"
	if [ -z "$STATUS" ]; then
		STATUS=$?
	fi
	if [ "$STATUS" -eq 0 ]; then
		return 0
	else
		printf "Setup failed at step: %s (exit code: %d)\n" "$STEP" "$STATUS" >&2
		printf "Check logs and configuration for errors\n" >&2
		exit "$STATUS"
	fi
}

trap 'stop_spinner' EXIT INT TERM

verify_prerequisites() {
	[ -x /usr/sbin/sshd ] || return 1
	[ -f /etc/ssh/sshd_config ] || return 1
	command -v apk >/dev/null 2>&1 || return 1
	return 0
}

ensure_openssh; STEP_STATUS=$?
check_step_status "OpenSSH installation" "$STEP_STATUS"

if ! verify_prerequisites; then
	printf "Prerequisites check failed after OpenSSH installation\n" >&2
	exit $ERR_PKG_INSTALL
fi

if [ "$DO_USERS" = 1 ]; then
	setup_users; STEP_STATUS=$?
	check_step_status "User setup" "$STEP_STATUS"
	if ! getent passwd root >/dev/null 2>&1; then
		printf "User validation failed: root user not properly configured\n" >&2
		exit $ERR_USER_SETUP
	fi
fi

if [ "$DO_SSH" = 1 ]; then
	setup_ssh; STEP_STATUS=$?
	check_step_status "SSH configuration" "$STEP_STATUS"
	if ! /usr/sbin/sshd -t >/dev/null 2>&1; then
		printf "SSH configuration validation failed after setup\n" >&2
		exit $ERR_SSH_CONFIG
	fi
fi

if [ "$DO_START" = 1 ]; then
	start_sshd; STEP_STATUS=$?
	check_step_status "SSH server start" "$STEP_STATUS"
	if [ "$MODE" = "background" ]; then
		sleep 2
		if ! pgrep -f "sshd.*-p $PORT" >/dev/null 2>&1; then
			printf "SSH server validation failed: process not running\n" >&2
			exit $ERR_SSH_START
		fi
	fi
fi


print_summary

exit 0